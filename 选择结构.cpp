//Author：张景豪
//Time：2019/8/4

#include <iostream>
#include <stdio.h>
//  头文件

//                  C/C++基础篇--选择结构

int main() {
    //  这是基础篇的最后一节，由于前面对于基础篇的整理较为混乱
    //  这里还是推荐以详细版为主，详细版的思路结构较为连贯，对于各章的知识点的归结较为详尽

    //  选择语句主要分为 if...else/else if 语句，以及switch语句
    //  接来下我会逐一对它们进行讲解

    //  这一节是C语言基础中较为重要的一节，会出现很多结构，这部分最好多练习加以掌握
    //
    //
    //
    //            我们重点讲述有关if...else (if)语句的相应知识
    //
    //            以字面的意思我们就可以知道，if...else语句说的就是  如果...否则  的意思
    //            结构：  if(表达式)    //若条件成立则实行花括号里的语句，反之则不执行
    //                    {
    //                        语句
    //                    }
    //                （形式1）
    //
    //     ---------------------------------------------------------------------------
    //
    //                    if()      //判断括号内的条件是否成立，成立则执行
    //                    {
    //                        语句1
    //                    }
    //                    else      //如果上面括号内的条件不成立，则执行
    //                    {
    //                        语句2
    //                    }
    //                （形式2）
    //
    //     ---------------------------------------------------------------------------
    //
    //                    if()     //判断括号内的条件是否成立，成立则执行
    //                    {
    //                        语句1
    //                    }
    //                    else if()  //如果上面括号内的不成立，则判断该括号内的条件是否成立，成立则执行
    //                    {
    //                        语句2
    //                    }
    //                    ... //以此类推
    //                （形式3）
    //
    //                ！！  if...else (if)语句使用的频率较高  ！！
    //
    //                在这里我们提及关于C语言的逻辑语言 或者 并且
    //                或者 ――> ‘||’
    //                并且 ――> '&&'
    //                这个务必要记住
    //
    //
    //                            switch语句
    //
    //                这个部分不重点讲，但是这个结构层次会比较鲜明，if语句写长了之后容易乱
    //
    //                 结构：switch(表达式)
    //                 {
    //                 case 常数表达式:语句1；
    //                 case 常数表达式:语句2；
    //                 case 常数表达式:语句3；
    //                    ......
    //                 default:语句n;
    //                 }
    //
    //
    //                 例：switch(value)
    //                 {
    //                 case 1:printf("one");break;
    //                 case 2:printf("two");break;
    //                 case 3:printf("three");break;
    //                 default:printf("other");break;
    //                 }
    //
    //
    //                    这里我们穿插讲讲条件运算符的相关知识
    //
    //         条件运算符可以在一定的程度上代替if...else语句，让代码看起来更简洁
    //
    //                    那么它的结构是啥嘞？
    //                    结构：表达式1？表达式2:表达式3；
    //         如何去理解它呢？我们先判断表达式1，如果表达式1为‘真’，或非0，则执行
    //
    //                    表达式2中的语句，反之，则执行表达式3的语句
    //
    //        举个例子吧：我们要从a.b两个数中得出较大的那个数，我们可以这样处理：
    //
    //
    //                     max=a>b?a:b;           //这个比较好理解，a如果大于b那么语句成立，返回语句2，a的值，反之返回语句3，b的值
    //
    //                     a>b?(max=a):(max=b);  //这与上面的例子相似，a>b成立则执行语句2的命令，反之执行语句3的命令
    //
    //这里我们来讲讲一点拓展知识：模版

    //                          下面的知识做了解即可，不需要深度刻意去理解

    //怎么去理解它？由于使用的较浅对于类和栈没有什么要求，可以直接理解成函数的一个模版，用于整合相似类型的函数比如一个比较大小的函数：max
    // 返回的是较大一个数，但是如果要重复使用而且存在int 和 double 两种类型的区别。一般情况下我们需要两个函数来实现大小的比较，但是它们的
    // 结构太相似了，我们该怎么简化它呢？这时候模版就派上了用场，就像它的名字，它可以自动辨识变量的类型并返回需要的值。
    //
    //          template <typename t>
    //          t max1(t a, t b){
    //          return a>b?a:b;
    //          }
    //
    //template 定义模版 后面用<>号typename 后面跟上使用的变量名，这里的变量名可以自己定义，上面使用的就是自己定义的t类型变量，接下来的操作只要把t当作普通的变量类型来使用即可，可以把它联想成 int 等等类型
    //这样做可以在一定程度上使代码更简洁。

    return 0;
}
