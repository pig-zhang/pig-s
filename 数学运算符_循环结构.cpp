#include <iostream>
#include <stdio.h>
//  头文件

//                      C/C++基础遍--数学运算符与表达式/循环结构

int main() {
    //  对C/C++的数学运算符有以下的归纳
    //  C语言中‘=’代表赋值，‘==’代表‘等于’，‘！=’代表‘不等于’
    //  ‘<='代表‘小于等于‘  ’>='代表‘大于等于’ ， 对于赋值也有讲究，是右赋值给左
    //  ' == ' 更多的使用在各种判断中

    //  以下为各种数学运算符

    //  加法：‘+’ 减法：‘-’ 乘法： ‘*’ 除法： ‘/’ 求模：‘%’
    //  写表达式也与数学写法相同，但是要注意括号的正确使用

    //  以下为几种较为特殊的数学运算符

    //            自增/自减：++/--      这个运算符可以使‘变量’自身加1或者减1
    //            ++/-- 放在变量的前面或者后面是有区别的
    //            ++/--放在变量前面  表示：先自身自增完后再参与相应的运算
    //            ++/--放在变量后面  表示：先进行相应的运算后再自身自增

    //            +=/-=表达式：

    //            放在‘变量’之后    ――>   a+=2   表示：a自身加上2
    //            同时其他的基础数学运算符也满足这样的表达式

    //            顺环结构

    //            在说循环结构时就不得不提到C/C++的两个最常见的逻辑运算符

    //            或者 ――> ‘||’
    //            并且 ――> '&&'

    /*
     *
     *              循环结构在许多地方都有妙用，可以使程序看起来更简洁、逻辑性更强等

                    循环结构有while，do...while，for三种语句

                    其中while与for语句的使用较多，do...while语句也可以写作while语句的形式
                    我们先来说说while语句
                     结构：while(表达式)
                     {
                     循环体语句
                     }

                    当表达式的结果为‘假’或者 0 时结束循环

                     例：while(i++<10)   //当i的值大于的时候，表达式的结果为‘假’，结束循环
                     {
                     printf(“count %d ”,i);
                     }


                    再来简单说说do...while语句
                     结构：do
                     {
                     循环体语句
                     }while(表达式);

                    与while语句不同的是，do...while先进行了一次循环语句，再来判断表达式


                    现在来说说for语句，十分好用的一种语句，与数组的结合使用十分经典

                     for语句使用由分号隔开的三个控制表达式来控制循环过程。初始化表达式只在开始执行循环语句之前执行一次。
                     如果判断表达式为真(或非0)就执行一次循环。然后计算更新表达式并再次检查判断表达式的值。for语句是一个
                     入口条件循环，在进行一次循环之前决定是否要执行循环，因此有可能循环一次也不执行。循环的语句部分可以是
                     一个简单的语句或一个复合语句。

                              ――――――――――来自网上的解释，挺好理解的

                     形式
                     结构：for(初始化表达式;判断表达式;更新表达式)
                     {
                     循环体语句
                     }
                    与while语句相似，在判断表达式为‘假’或者 0 之前重复进行循环语句

                    例：
                         for(i=0;i<100;i++)
                         {
                         printf("i count is %d\n",i);
                         }
                    当i<100时重复进行循环语句，执行完循环语句后再进行i++


                    说完循环结构，有几个循环结构的特殊语句不得不提及
                    那就是：break，continue语句

                    按字面意思可以知道，break语句可以用来打破循环，结束循环语句
                    continue语句字面上看是继续循环，其实它的作用是：不再进行continue语句后的循环语句
                    直接进入下一次循环，这里需要注意
     *
     * */
    return 0;
}
